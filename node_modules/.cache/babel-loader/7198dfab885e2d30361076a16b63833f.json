{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mmans\\\\Desktop\\\\React-projs\\\\Gpa React\\\\src\\\\components\\\\Users\\\\AddData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddData = props => {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const [selectedCounty, setSelectedCountry] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  const countries = {\n    // France: [\"Paris\", \"Marseille\", \"Lille\", \"Lyon\"],\n    // Usa: [\"New York\", \"San Francisco\", \"Austin\", \"Dallas\"],\n    // Brazil: [\"São Paulo\", \"Rio de Janeiro\", \"Salvador\"]\n    O: [10]\n  };\n  const countryList = Object.keys(countries).map(key => ({\n    name: key\n  }));\n\n  function handleCountrySelect(e) {\n    console.log(\"Selected country\", e.target.value);\n    const countrySel = e.target.value;\n    const citiesSel = countrySel !== \"\" ? countries[countrySel] : \"\";\n    setSelectedCountry(countrySel);\n    setCities(citiesSel);\n    setSelectedCity(\"\");\n  }\n\n  function handleCitySelect(e) {\n    console.log(\"Selected city\", e.target.value);\n    const citiesSel = e.target.value;\n    setSelectedCity(citiesSel);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"subname\",\n      children: \"Subject Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"subname\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmoFor: \"grade\",\n      children: \"Grade\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"Countries\",\n      onChange: e => handleCountrySelect(e),\n      value: selectedCounty,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select the country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), countryList.map((country, key) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country.name,\n        children: country.name\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmoFor: \"credit\",\n      children: \"Credit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"Cities\",\n      onChange: e => handleCitySelect(e),\n      value: selectedCity,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select the city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), cities.map((city, key) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: city,\n        children: city\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddData, \"lv2rC4kUxQwdDI42z785zLAiqm4=\");\n\n_c = AddData;\nexport default AddData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["C:/Users/mmans/Desktop/React-projs/Gpa React/src/components/Users/AddData.js"],"names":["React","useState","AddData","props","cities","setCities","selectedCounty","setSelectedCountry","selectedCity","setSelectedCity","countries","O","countryList","Object","keys","map","key","name","handleCountrySelect","e","console","log","target","value","countrySel","citiesSel","handleCitySelect","country","city"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\n\r\nconst AddData = props => {\r\n\r\n    const [cities, setCities] = useState([]);\r\n    const [selectedCounty, setSelectedCountry] = useState(\"\");\r\n    const [selectedCity, setSelectedCity] = useState(\"\");\r\n\r\n    const countries = {\r\n        // France: [\"Paris\", \"Marseille\", \"Lille\", \"Lyon\"],\r\n        // Usa: [\"New York\", \"San Francisco\", \"Austin\", \"Dallas\"],\r\n        // Brazil: [\"São Paulo\", \"Rio de Janeiro\", \"Salvador\"]\r\n        O: [10,]\r\n      };\r\n\r\n      const countryList = Object.keys(countries).map(key => ({\r\n        name: key\r\n      }));\r\n\r\n      function handleCountrySelect(e) {\r\n        console.log(\"Selected country\", e.target.value);\r\n        const countrySel = e.target.value;\r\n        const citiesSel = countrySel !== \"\" ? countries[countrySel] : \"\";\r\n        setSelectedCountry(countrySel);\r\n        setCities(citiesSel);\r\n        setSelectedCity(\"\");\r\n      }\r\n    \r\n      function handleCitySelect(e) {\r\n        console.log(\"Selected city\", e.target.value);\r\n        const citiesSel = e.target.value;\r\n        setSelectedCity(citiesSel);\r\n      }\r\n\r\n  return (\r\n    <form>\r\n        <label htmlFor=\"subname\">Subject Name</label>\r\n        <input id=\"subname\" type=\"text\" />\r\n\r\n        <label htmoFor=\"grade\">Grade</label>\r\n        <select\r\n          name=\"Countries\"\r\n          onChange={e => handleCountrySelect(e)}\r\n          value={selectedCounty}\r\n        >\r\n          <option value=\"\">Select the country</option>\r\n          {countryList.map((country, key) => (\r\n            <option key={key} value={country.name}>\r\n              {country.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        \r\n        <label htmoFor=\"credit\">Credit</label>\r\n        <select\r\n          name=\"Cities\"\r\n          onChange={e => handleCitySelect(e)}\r\n          value={selectedCity}\r\n        >\r\n          <option value=\"\">Select the city</option>\r\n          {cities.map((city, key) => (\r\n            <option key={key} value={city}>\r\n              {city}\r\n            </option>\r\n          ))}\r\n        </select>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddData;"]},"metadata":{},"sourceType":"module"}